{
  "_from": "tesseract.js",
  "_id": "tesseract.js@1.0.10",
  "_inBundle": false,
  "_integrity": "sha1-4RqWrnYUeTnZIY+I4of7aUFLHl0=",
  "_location": "/tesseract.js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "tesseract.js",
    "fetchSpec": "latest",
    "name": "tesseract.js",
    "raw": "tesseract.js",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tesseract.js/-/tesseract.js-1.0.10.tgz",
  "_shasum": "e11a96ae76147939d9218f88e287fb69414b1e5d",
  "_shrinkwrap": null,
  "_spec": "tesseract.js",
  "_where": "/home/bobobis/Documents/virtual_version",
  "author": "",
  "browser": {
    "./src/node/index.js": "./src/browser/index.js"
  },
  "bugs": {
    "url": "https://github.com/naptha/tesseract.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "file-type": "^3.8.0",
    "is-url": "^1.2.2",
    "jpeg-js": "^0.2.0",
    "level-js": "^2.2.4",
    "node-fetch": "^1.6.3",
    "object-assign": "^4.1.0",
    "png.js": "^0.2.1",
    "tesseract.js-core": "^1.0.2"
  },
  "deprecated": false,
  "description": "Pure Javascript Multilingual OCR",
  "devDependencies": {
    "babel-preset-es2015": "^6.16.0",
    "babelify": "^7.3.0",
    "browserify": "^13.1.0",
    "envify": "^3.4.1",
    "http-server": "^0.9.0",
    "pako": "^1.0.3",
    "watchify": "^3.7.0"
  },
  "homepage": "https://github.com/naptha/tesseract.js",
  "license": "Apache-2.0",
  "main": "src/index.js",
  "name": "tesseract.js",
  "optionalDependencies": {},
  "readme": "# [Tesseract.js](http://tesseract.projectnaptha.com/)\n\n[![npm version](https://badge.fury.io/js/tesseract.js.svg)](https://badge.fury.io/js/tesseract.js)\n[![Beerpay](https://beerpay.io/naptha/tesseract.js/badge.svg)](https://beerpay.io/naptha/tesseract.js)\n\nTesseract.js is a javascript library that gets words in [almost any language](./docs/tesseract_lang_list.md) out of images. ([Demo](http://tesseract.projectnaptha.com/))\n\n<!-- Under the hood, Tesseract.js wraps [tesseract.js-core](https://github.com/naptha/tesseract.js-core), an [emscripten](https://github.com/kripken/emscripten) port of the [Tesseract OCR Engine](https://github.com/tesseract-ocr/tesseract).\n -->\n\n[![fancy demo gif](./demo.gif \"Demo\")](http://tesseract.projectnaptha.com)\n\nTesseract.js works with script tags, webpack/browserify, and node. [After you install it](#installation), using it is as simple as \n```javascript\nTesseract.recognize(myImage)\n         .progress(function  (p) { console.log('progress', p)    })\n         .then(function (result) { console.log('result', result) })\n```\n\n[Check out the docs](#docs) for a full treatment of the API.\n\n\n# Installation\nTesseract.js works with a `<script>` tag via local copy or cdn, with webpack and browserify via `npm`, and on node via `npm`. [Check out the docs](#docs) for a full treatment of the API.\n\n## &lt;script />\n\nYou can simply include Tesseract.js with a cdn like this:\n```html\n<script src='https://cdn.rawgit.com/naptha/tesseract.js/1.0.10/dist/tesseract.js'></script>\n```\n\nAfter including your scripts, the `Tesseract` variable should be defined! You can [head to the docs](#docs) for a full treatment of the API.\n\n## npm\nFirst:\n```shell\n> npm install tesseract.js --save\n```\n> Note: Tesseract.js currently requires node v6.8.0 or greater.\n\n\nThen\n```javascript\nvar Tesseract = require('tesseract.js')\n```\n\nor\n```javascript\nimport Tesseract from 'tesseract.js'\n```\n\nYou can [head to the docs](#docs) for a full treatment of the API.\n\n# Docs \n\n* [Tesseract.recognize(image: ImageLike[, options]) -> [TesseractJob](#tesseractjob)](#tesseractrecognizeimage-imagelike-options---tesseractjob)\n  + [Simple Example](#simple-example)\n  + [More Complicated Example](#more-complicated-example)\n* [Tesseract.detect(image: ImageLike) -> [TesseractJob](#tesseractjob)](#tesseractdetectimage-imagelike---tesseractjob)\n* [ImageLike](#imagelike)\n* [TesseractJob](#tesseractjob)\n  + [TesseractJob.progress(callback: function) -> TesseractJob](#tesseractjobprogresscallback-function---tesseractjob)\n  + [TesseractJob.then(callback: function) -> TesseractJob](#tesseractjobthencallback-function---tesseractjob)\n  + [TesseractJob.catch(callback: function) -> TesseractJob](#tesseractjoberrorcallback-function---tesseractjob)\n  + [TesseractJob.finally(callback: function) -> TesseractJob](#tesseractjobfinallycallback-function---tesseractjob)\n* [Local Installation](#local-installation)\n  + [corePath](#corepath)\n  + [workerPath](#workerpath)\n  + [langPath](#langpath)\n* [Contributing](#contributing)\n  + [Development](#development) \n  + [Building Static Files](#building-static-files)\n  + [Send us a Pull Request!](#send-us-a-pull-request)\n\n\n## Tesseract.recognize(image: [ImageLike](#imagelike)[, options]) -> [TesseractJob](#tesseractjob)\nFigures out what words are in `image`, where the words are in `image`, etc. \n> Note: `image` should be be sufficiently high resolution.\n> Often, the same image will get much better results if you upscale it before calling `recognize`.\n\n- `image` is any [ImageLike](#imagelike) object.\n- `options` is either absent (in which case it is interpreted as `'eng'`), a string specifing a language short code from the [language list](./docs/tesseract_lang_list.md), or a flat json object that may:\n    + include properties that override some subset of the [default tesseract parameters](./docs/tesseract_parameters.md)\n    + include a `lang` property with a value from the [list of lang parameters](./docs/tesseract_lang_list.md)\n\nReturns a [TesseractJob](#tesseractjob) whose `then`, `progress`, `catch` and `finally` methods can be used to act on the result.\n\n### Simple Example:\n```javascript\nTesseract.recognize(myImage)\n.then(function(result){\n    console.log(result)\n})\n```\n\n### More Complicated Example:\n```javascript\n// if we know our image is of spanish words without the letter 'e':\nTesseract.recognize(myImage, {\n    lang: 'spa',\n    tessedit_char_blacklist: 'e'\n})\n.then(function(result){\n    console.log(result)\n})\n```\n\n\n\n\n## Tesseract.detect(image: [ImageLike](#imagelike)) -> [TesseractJob](#tesseractjob)\n\nFigures out what script (e.g. 'Latin', 'Chinese') the words in  image are written in.\n\n- `image` is any [ImageLike](#imagelike) object.\n\nReturns a [TesseractJob](#tesseractjob) whose `then`, `progress`, `error` and `finally` methods can be used to act on the result of the script.\n\n\n```javascript\nTesseract.detect(myImage)\n.then(function(result){\n    console.log(result)\n})\n```\n\n\n## ImageLike\n\nThe main Tesseract.js functions take an `image` parameter, which should be something that is like an image. What's considered \"image-like\" differs depending on whether it is being run from the browser or through NodeJS.\n\n\nOn a browser, an image can be:\n- an `img`, `video`, or `canvas` element\n- a CanvasRenderingContext2D (returned by `canvas.getContext('2d')`)\n- a `File` object (from a file `<input>` or drag-drop event)\n- a `Blob` object\n- a `ImageData` instance (an object containing `width`, `height` and `data` properties)\n- a path or URL to an accessible image (the image must either be hosted locally or accessible by CORS)\n\n\n\n\nIn NodeJS, an image can be\n- a path to a local image\n- a `Buffer` instance containing a `PNG` or `JPEG` image\n- a `ImageData` instance (an object containing `width`, `height` and `data` properties)\n\n\n## TesseractJob\n\nA TesseractJob is an an object returned by a call to `recognize` or `detect`. It's inspired by the ES6 Promise interface and provides `then` and `catch` methods. It also provides `finally` method, which will be fired regardless of the job fate. One important difference is that these methods return the job itself (to enable chaining) rather than new. \n\nTypical use is: \n```javascript\nTesseract.recognize(myImage)\n    .progress(message => console.log(message))\n    .catch(err => console.error(err))\n    .then(result => console.log(result))\n    .finally(resultOrError => console.log(resultOrError))\n```\n\nWhich is equivalent to:\n```javascript\nvar job1 = Tesseract.recognize(myImage);\n\njob1.progress(message => console.log(message));\n\njob1.catch(err => console.error(err));\n\njob1.then(result => console.log(result));\n\njob1.finally(resultOrError => console.log(resultOrError));\n```\n\n\n\n### TesseractJob.progress(callback: function) -> TesseractJob\nSets `callback` as the function that will be called every time the job progresses. \n- `callback` is a function with the signature `callback(progress)` where `progress` is a json object.\n\nFor example: \n```javascript\nTesseract.recognize(myImage)\n    .progress(function(message){console.log('progress is: ', message)})\n```\n\nThe console will show something like: \n```javascript\nprogress is: {loaded_lang_model: \"eng\", from_cache: true}\nprogress is: {initialized_with_lang: \"eng\"}\nprogress is: {set_variable: Object}\nprogress is: {set_variable: Object}\nprogress is: {recognized: 0}\nprogress is: {recognized: 0.3}\nprogress is: {recognized: 0.6}\nprogress is: {recognized: 0.9}\nprogress is: {recognized: 1}\n```\n\n\n### TesseractJob.then(callback: function) -> TesseractJob\nSets `callback` as the function that will be called if and when the job successfully completes. \n- `callback` is a function with the signature `callback(result)` where `result` is a json object.\n\n\nFor example: \n```javascript\nTesseract.recognize(myImage)\n    .then(function(result){console.log('result is: ', result)})\n```\n\nThe console will show something like: \n```javascript\nresult is: {\n    blocks: Array[1]\n    confidence: 87\n    html: \"<div class='ocr_page' id='page_1' ...\"\n    lines: Array[3]\n    oem: \"DEFAULT\"\n    paragraphs: Array[1]\n    psm: \"SINGLE_BLOCK\"\n    symbols: Array[33]\n    text: \"Hello World↵from beyond↵the Cosmic Void↵↵\"\n    version: \"3.04.00\"\n    words: Array[7]\n}\n```\n\n### TesseractJob.catch(callback: function) -> TesseractJob\nSets `callback` as the function that will be called if the job fails. \n- `callback` is a function with the signature `callback(error)` where `error` is a json object. \n\n### TesseractJob.finally(callback: function) -> TesseractJob\nSets `callback` as the function that will be called regardless if the job fails or success.\n- `callback` is a function with the signature `callback(resultOrError)` where `resultOrError` is a json object.\n\n## Local Installation\n\nIn the browser, `tesseract.js` simply provides the API layer. Internally, it opens a WebWorker to handle requests. That worker itself loads code from the Emscripten-built `tesseract.js-core` which itself is hosted on a CDN. Then it dynamically loads language files hosted on another CDN. \n\nBecause of this we recommend loading `tesseract.js` from a CDN. But if you really need to have all your files local, you can use the `Tesseract.create` function which allows you to specify custom paths for workers, languages, and core. \n\n```javascript\nwindow.Tesseract = Tesseract.create({\n    workerPath: '/path/to/worker.js',\n    langPath: 'https://cdn.rawgit.com/naptha/tessdata/gh-pages/3.02/',\n    corePath: 'https://cdn.rawgit.com/naptha/tesseract.js-core/0.1.0/index.js',\n})\n```\n\n### corePath\nA string specifying the location of the [tesseract.js-core library](https://github.com/naptha/tesseract.js-core), with default value 'https://cdn.rawgit.com/naptha/tesseract.js-core/master/index.js'. Set this string before calling `Tesseract.recognize` and `Tesseract.detect` if you want Tesseract.js to use a different file.\n\n### workerPath\nA string specifying the location of the [tesseract.worker.js](./dist/tesseract.worker.js) file. Set this string before calling `Tesseract.recognize` and `Tesseract.detect` if you want Tesseract.js to use a different file.\n\n### langPath\nA string specifying the location of the tesseract language files, with default value 'https://cdn.rawgit.com/naptha/tessdata/gh-pages/3.02/'. Language file urls are calculated according to the formula `langPath + langCode + '.traineddata.gz'`. Set this string before calling `Tesseract.recognize` and `Tesseract.detect` if you want Tesseract.js to use different language files.\n\n\n## Contributing\n### Development\nTo run a development copy of tesseract.js, first clone this repo.\n```shell\n> git clone https://github.com/naptha/tesseract.js.git\n```\n\nThen, cd in to the folder, `npm install`, and `npm start`\n```shell\n> cd tesseract.js\n> npm install && npm start\n\n  ... a bunch of npm stuff ... \n\n  Starting up http-server, serving ./\n  Available on:\n    http://127.0.0.1:7355\n    http://[your ip]:7355\n\n```\n\nThen open `http://localhost:7355/examples/file-input/demo.html` in your favorite browser. The devServer automatically rebuilds tesseract.js and tesseract.worker.js when you change files in the src folder.\n\n### Building Static Files\nAfter you've cloned the repo and run `npm install` as described in the [Development Section](#development), you can build static library files in the dist folder with \n```shell\n> npm run build\n```\n\n### Send us a Pull Request!\nThanks :)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/naptha/tesseract.js.git"
  },
  "scripts": {
    "build": "browserify src/index.js -t [ babelify --presets [ es2015 ] ] -o dist/tesseract.js --standalone Tesseract && browserify src/browser/worker.js -t [ babelify --presets [ es2015 ] ] -o dist/worker.js",
    "release": "npm run build && git commit -am 'new release' && git push && git tag `jq -r '.version' package.json` && git push origin --tags && npm publish",
    "start": "watchify src/index.js  -t [ envify --NODE_ENV development ] -t [ babelify --presets [ es2015 ] ] -o dist/tesseract.dev.js --standalone Tesseract & watchify src/browser/worker.js  -t [ envify --NODE_ENV development ] -t [ babelify --presets [ es2015 ] ] -o dist/worker.dev.js & http-server -p 7355",
    "test": "echo \"Error: no test specified\" & exit 1"
  },
  "version": "1.0.10"
}
